name: Release

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create GitHub Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
      
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
        fi
        
        # Save multiline output
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Academic Workflow ${{ github.ref_name }}
        body: |
          ## Changes in this Release
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Docker Images
          
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
          
          ## Deployment
          
          ```bash
          # Using Docker
          docker run -p 3000:3000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          
          # Using Docker Compose
          export IMAGE_TAG=${{ github.ref_name }}
          docker-compose up -d
          ```
          
          ## Documentation
          
          - [Docker Deployment Guide](./DOCKER.md)
          - [Setup Instructions](./README.md)
          
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

  # Build and Test
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test
      
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_TELEMETRY_DISABLED: 1

  # Build and Push Release Docker Image
  docker-release:
    name: Build Release Image
    runs-on: ubuntu-latest
    needs: [build]
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest
          type=raw,value=stable
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        format: spdx-json
        output-file: sbom-release.spdx.json
        
    - name: Upload SBOM to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: sbom-release.spdx.json
        asset_name: sbom-${{ github.ref_name }}.spdx.json
        asset_content_type: application/json

  # Security Scan for Release
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker-release]
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Create Deployment Artifacts
  artifacts:
    name: Create Deployment Artifacts
    runs-on: ubuntu-latest
    needs: [release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment package
      run: |
        mkdir -p release-artifacts
        
        # Copy essential deployment files
        cp docker-compose.yml release-artifacts/
        cp docker-compose.prod.yml release-artifacts/
        cp .env.docker release-artifacts/.env.template
        cp deploy.sh release-artifacts/
        cp DOCKER.md release-artifacts/
        cp -r nginx release-artifacts/
        cp -r monitoring release-artifacts/
        
        # Create deployment instructions
        cat > release-artifacts/DEPLOY.md << 'EOF'
        # Deployment Instructions
        
        ## Quick Deploy
        
        1. Copy `.env.template` to `.env.local` and configure
        2. Run: `./deploy.sh prod`
        3. Access: http://localhost:3000
        
        ## Docker Image
        
        ```bash
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        ```
        
        ## Documentation
        
        See DOCKER.md for complete deployment guide.
        EOF
        
        # Create archive
        tar -czf academic-workflow-${{ github.ref_name }}-deployment.tar.gz -C release-artifacts .
        
    - name: Upload deployment package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: academic-workflow-${{ github.ref_name }}-deployment.tar.gz
        asset_name: academic-workflow-${{ github.ref_name }}-deployment.tar.gz
        asset_content_type: application/gzip

  # Notify on Release
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, docker-release, security-scan, artifacts]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.release.result == 'success' && needs.docker-release.result == 'success' }}
      run: |
        echo "✅ Release ${{ github.ref_name }} completed successfully!"
        echo "🐳 Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        
    - name: Notify failure
      if: ${{ needs.release.result == 'failure' || needs.docker-release.result == 'failure' }}
      run: |
        echo "❌ Release ${{ github.ref_name }} failed!"
        exit 1