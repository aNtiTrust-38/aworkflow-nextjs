name: Security

on:
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Dependency Vulnerability Scan
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
      
    - name: Upload Snyk results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: snyk.sarif

  # Code Security Analysis
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Docker Image Security Scan
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: docker build -t academic-workflow:test .
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'academic-workflow:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true
        
    - name: Upload Hadolint scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: hadolint-results.sarif

  # Infrastructure Security
  infrastructure-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        framework: dockerfile,secrets
        output_format: sarif
        output_file_path: checkov-results.sarif
        
    - name: Upload Checkov scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-results.sarif

  # OWASP ZAP Security Test
  security-test:
    name: OWASP ZAP Security Test
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Start application
      run: |
        cp .env.docker .env.local
        echo "ANTHROPIC_API_KEY=test-key" >> .env.local
        echo "OPENAI_API_KEY=test-key" >> .env.local
        echo "SETTINGS_ENCRYPTION_KEY=test-key-32-characters-long-12" >> .env.local
        docker-compose up -d
        
    - name: Wait for application
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 5; done'
        
    - name: ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  # Security Policy Compliance
  compliance:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check security policy
      run: |
        # Check for security policy file
        if [ ! -f "SECURITY.md" ]; then
          echo "⚠️ SECURITY.md file not found"
          exit 1
        fi
        
        # Check for required security headers in code
        if ! grep -r "X-Frame-Options\|X-Content-Type-Options\|X-XSS-Protection" . --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx"; then
          echo "⚠️ Security headers not found in code"
        fi
        
        # Check for environment variable validation
        if ! grep -r "process\.env\." . --include="*.ts" --include="*.js" | grep -v "test" | head -1; then
          echo "ℹ️ Environment variables found"
        fi
        
        # Check for input validation
        if ! grep -r "validation\|sanitize\|escape" . --include="*.ts" --include="*.js" | head -1; then
          echo "⚠️ Consider adding input validation"
        fi
        
        echo "✅ Security compliance check completed"

  # License Compliance
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check licenses
      uses: fossa-contrib/fossa-action@v2
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}
        
  # Security Report
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security, secret-scan, compliance]
    if: always()
    
    steps:
    - name: Generate security report
      run: |
        echo "## Security Scan Report" > security-report.md
        echo "" >> security-report.md
        echo "### Scan Results" >> security-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- Code Security: ${{ needs.code-security.result }}" >> security-report.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
        echo "- Compliance: ${{ needs.compliance.result }}" >> security-report.md
        echo "" >> security-report.md
        echo "### Recommendations" >> security-report.md
        echo "- Regularly update dependencies" >> security-report.md
        echo "- Monitor security advisories" >> security-report.md
        echo "- Review and rotate secrets" >> security-report.md
        echo "- Maintain security documentation" >> security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 30