version: '3.8'

services:
  # Academic Workflow Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - DATABASE_URL=file:./prisma/dev.db
      # Add your API keys here or use Docker secrets
      # - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - SETTINGS_ENCRYPTION_KEY=${SETTINGS_ENCRYPTION_KEY}
    volumes:
      # Persist database and user data
      - app_data:/app/prisma
    networks:
      - academic_workflow
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (for production)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: academic_workflow
      POSTGRES_USER: workflow_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - academic_workflow
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U workflow_user -d academic_workflow"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    ports:
      - "5432:5432"  # Remove in production for security

  # Redis for session storage and caching (optional)
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    networks:
      - academic_workflow
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  app_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  academic_workflow:
    driver: bridge