// Prisma schema for academic workflow - PostgreSQL Production Version

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid()) @db.Uuid
  name      String        @db.VarChar(255)
  email     String        @unique @db.VarChar(255)
  password  String        @db.VarChar(255)
  papers    Paper[]
  files     File[]
  settings  UserSettings?
  createdAt DateTime      @default(now()) @db.Timestamptz
  updatedAt DateTime      @updatedAt @db.Timestamptz

  @@index([email])
  @@index([createdAt])
}

model UserSettings {
  id                    String   @id @default(uuid()) @db.Uuid
  userId                String   @unique @db.Uuid
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // AI Provider Settings (encrypted)
  anthropicApiKey       String?  @db.Text
  openaiApiKey          String?  @db.Text
  monthlyBudget         Float    @default(100) @db.DoublePrecision
  preferredProvider     String   @default("auto") @db.VarChar(50)
  
  // Academic Preferences
  citationStyle         String   @default("apa") @db.VarChar(20)
  defaultLanguage       String   @default("en") @db.VarChar(10)
  adhdFriendlyMode      Boolean  @default(false)
  
  // UI Preferences
  theme                 String   @default("system") @db.VarChar(20)
  reducedMotion         Boolean  @default(false)
  highContrast          Boolean  @default(false)
  
  createdAt             DateTime @default(now()) @db.Timestamptz
  updatedAt             DateTime @updatedAt @db.Timestamptz

  @@index([userId])
}

model Paper {
  id        String     @id @default(uuid()) @db.Uuid
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @db.Uuid
  title     String     @db.VarChar(500)
  outline   String?    @db.Text
  content   String?    @db.Text
  status    String?    @db.VarChar(50)
  references Reference[]
  files     File[]
  createdAt DateTime   @default(now()) @db.Timestamptz
  updatedAt DateTime   @updatedAt @db.Timestamptz

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@fulltext([title, content])
}

model Reference {
  id        String   @id @default(uuid()) @db.Uuid
  paper     Paper    @relation(fields: [paperId], references: [id], onDelete: Cascade)
  paperId   String   @db.Uuid
  title     String   @db.VarChar(500)
  authors   String   @db.Text
  source    String   @db.VarChar(255)
  url       String   @db.Text
  citation  String   @db.Text
  addedAt   DateTime @default(now()) @db.Timestamptz

  @@index([paperId])
  @@index([addedAt])
  @@fulltext([title, authors, citation])
}

model File {
  id        String   @id @default(uuid()) @db.Uuid
  paper     Paper?   @relation(fields: [paperId], references: [id], onDelete: SetNull)
  paperId   String?  @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  filename  String   @db.VarChar(255)
  type      String   @db.VarChar(50)
  path      String   @db.Text
  size      BigInt?  @db.BigInt
  mimeType  String?  @db.VarChar(100)
  uploadedAt DateTime @default(now()) @db.Timestamptz

  @@index([userId])
  @@index([paperId])
  @@index([type])
  @@index([uploadedAt])
}

model AppSetting {
  id          String   @id @default(uuid()) @db.Uuid
  key         String   @unique @db.VarChar(100)
  value       String   @db.Text // Encrypted value
  encrypted   Boolean  @default(true)
  category    String?  @db.VarChar(50) // Optional categorization (ai, auth, database, etc.)
  description String?  @db.Text // Human-readable description
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz

  @@index([category])
  @@index([key])
}

// New models for enhanced functionality

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model AuditLog {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @db.Uuid
  action    String   @db.VarChar(100)
  resource  String   @db.VarChar(100)
  resourceId String? @db.Uuid
  metadata  Json?    @db.JsonB
  ipAddress String?  @db.Inet
  userAgent String?  @db.Text
  createdAt DateTime @default(now()) @db.Timestamptz

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}

model Usage {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @db.Uuid
  provider      String   @db.VarChar(50)
  tokens        Int      @db.Integer
  cost          Float    @db.DoublePrecision
  requestType   String   @db.VarChar(50)
  model         String?  @db.VarChar(100)
  createdAt     DateTime @default(now()) @db.Timestamptz

  @@index([userId])
  @@index([provider])
  @@index([createdAt])
  @@index([userId, createdAt])
}